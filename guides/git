Poradnik do GITa
# komenda - znaczenie

git config -l # aktualne ustawienia
git config --global user.name "Imię Nazwisko"   # imię i nazwisko autora
git config --global user.email "mail@mail.com"  # email autora
git init    # tworzenie nowego repo
git clone   # klonowanie repo
git shortlog -s -n  # sprawdzenie uczestników projektu
git shortlog -s -n | wc -l  # wyświetlnie tylko liczny uczestników projektu
find . -type f -print | grep -v -E '/\.git/' | wc -l    # ustalenie liczby plików w projekcie
git log    # sprawdzenie zmian wprowadzonych w projekcie w formie loga
git log --pretty=oneline | wc -l    # sprawdzenie liczby rewizji
inne formaty --pretty=
                        oneline     # ID rewizji, krótki opis
                        short       # format oneline + autor rewizji
                        medium      # format short + data rewizji
                        full        # format medium bez daty + osoba dołączająca rewizję do projektu
                        fuller      # format full + data wykonania rewizji, data dołączenia rewizji
                        email       # podstawowe informacje w formacie email
                        raw         # informacje dotyczące powiązań rewizji (parent, tree)
                        format      # formatowanie zdefiniowane przez użytkownika

Do filtrowania zmian służą parametry:
-n  # liczba interesujących nas rewizji np -7 oznacza ostatnie 7 rewizji
--since="yyyy-mm-dd"   # data początkowa
--until="yyyy-mm-dd"   # data końcowa
--author=goral20    # rewizje wykonane przez wybrane autora
gitk lub git gui    # uruchomienie GUI dla GITa

git reset --hard    # przywracanie plików do stanu odpowiadającego ostatniej rewizji
git reset --hard HEAD    # to samo co wyżej
git reset --hard [SHA1]     # przywrócenie plików na podstawie rewizji odpowiadającej kodzie SHA1 (w miejsce [SHA1] wpisujemy kod)
git checkout -f     # kolejny sposób przywracania
git checkout -f [SHA1]  # rozwięcie przuwracania na podstawie kodu SHA1
git status  # wyświetlenie statusu projektu
git add -A  # tworzenie reqwizji dla plików zmodyfikowanych, nowych oraz usuniętych
git add -all    # to samo co wyżej
git add .   # tworzenie rewizji tylko dla nowych bez modyfikowanych oraz usuniętych
git add -u  # tworzenie rewizji tylko dla zmodyfikowanych oraz usuniętych plików
git commit -a -m "komunikat ..."    # dodanie commitów dla plików zaindeksowanych oraz nie zaindeksowanych
git commit -m "komunikat ..."    # tworzenie commita dla plików zaindeksowanych
najlepsze połączenie add oraz commit:
git add -A
git commit -m "komunikat"
oraz
gi add .
git commit -a -m "komunikat"
git branch  # sprawdzenie bieżącej gałęzi
git checkout master     # powrót do głównej gałęzi
git rm nazwa_pliku  # do usuwania zaindeksowanego pliku
git mv stara-nazwa nowa-nazwa   # zmiana nazwy pliku
